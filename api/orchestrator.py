from __future__ import annotations

import json
from uuid import uuid4
from typing import Any

from orchestrator import crud
from orchestrator.models import Run, FeatureCreate


def execute_objective(db: Any, project_id: int | None, objective: str) -> Run:
    """Deterministic demo orchestrator.

    Parameters
    ----------
    db: unused placeholder for potential future session/connection
    project_id: associated project identifier
    objective: natural language instruction from the user
    """
    run_id = str(uuid4())
    crud.create_run(run_id, objective, project_id)
    crud.record_run_step(run_id, "plan", json.dumps({"objective": objective}))

    artifacts: dict[str, list[int]] = {"created_item_ids": [], "updated_item_ids": []}
    html = "<p>No action performed.</p>"
    summary = "No changes were made."

    if project_id is not None and "feature" in objective.lower():
        feature = crud.create_item(
            FeatureCreate(
                title=objective,
                description="Generated by AI",
                project_id=project_id,
            )
        )
        artifacts["created_item_ids"].append(feature.id)
        crud.record_run_step(
            run_id,
            "execute",
            json.dumps({"action": "create_feature", "item_id": feature.id}),
        )
        html = f"<p>Feature created: {feature.title}</p>"
        summary = f"Feature created: {feature.title}"

    crud.finish_run(run_id, html, summary, artifacts)
    run_dict = crud.get_run(run_id)
    return Run(**run_dict)
